@startuml
namespace api {
    class Input << (S,Aquamarine) >> {
        + Logger logwrapper.LoggerWrapper
        + PublishManager publishmanager.UseCases
        + GrafanaOnCall grafanaoncall.UseCases

    }
}


namespace appcontext {
    interface Context  {
        + Done() 
        + SetLogger(logger logwrapper.LoggerWrapper) 
        + Logger() logwrapper.LoggerWrapper
        + Context() context.Context
        + TraceID() string
        + SpanID() string
        + WithValue(key <font color=blue>interface</font>{}, val <font color=blue>interface</font>{}) 
        + Value(key <font color=blue>interface</font>{}) <font color=blue>interface</font>{}
        + TTL() *int64

    }
    class MockContext << (S,Aquamarine) >> {
        + EXPECT() *MockContext_Expecter
        + Context() context.Context
        + Done() 
        + Logger() logwrapper.LoggerWrapper
        + SetLogger(logger logwrapper.LoggerWrapper) 
        + SpanID() string
        + TTL() *int64
        + TraceID() string
        + Value(key <font color=blue>interface</font>{}) <font color=blue>interface</font>{}
        + WithValue(key <font color=blue>interface</font>{}, val <font color=blue>interface</font>{}) 

    }
    class MockContext_Context_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockContext_Context_Call
        + Return(_a0 context.Context) *MockContext_Context_Call
        + RunAndReturn(run <font color=blue>func</font>() context.Context) *MockContext_Context_Call

    }
    class MockContext_Done_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockContext_Done_Call
        + Return() *MockContext_Done_Call
        + RunAndReturn(run <font color=blue>func</font>() ) *MockContext_Done_Call

    }
    class MockContext_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + Context() *MockContext_Context_Call
        + Done() *MockContext_Done_Call
        + Logger() *MockContext_Logger_Call
        + SetLogger(logger <font color=blue>interface</font>{}) *MockContext_SetLogger_Call
        + SpanID() *MockContext_SpanID_Call
        + TTL() *MockContext_TTL_Call
        + TraceID() *MockContext_TraceID_Call
        + Value(key <font color=blue>interface</font>{}) *MockContext_Value_Call
        + WithValue(key <font color=blue>interface</font>{}, val <font color=blue>interface</font>{}) *MockContext_WithValue_Call

    }
    class MockContext_Logger_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockContext_Logger_Call
        + Return(_a0 logwrapper.LoggerWrapper) *MockContext_Logger_Call
        + RunAndReturn(run <font color=blue>func</font>() logwrapper.LoggerWrapper) *MockContext_Logger_Call

    }
    class MockContext_SetLogger_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(logwrapper.LoggerWrapper) ) *MockContext_SetLogger_Call
        + Return() *MockContext_SetLogger_Call
        + RunAndReturn(run <font color=blue>func</font>(logwrapper.LoggerWrapper) ) *MockContext_SetLogger_Call

    }
    class MockContext_SpanID_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockContext_SpanID_Call
        + Return(_a0 string) *MockContext_SpanID_Call
        + RunAndReturn(run <font color=blue>func</font>() string) *MockContext_SpanID_Call

    }
    class MockContext_TTL_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockContext_TTL_Call
        + Return(_a0 *int64) *MockContext_TTL_Call
        + RunAndReturn(run <font color=blue>func</font>() *int64) *MockContext_TTL_Call

    }
    class MockContext_TraceID_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockContext_TraceID_Call
        + Return(_a0 string) *MockContext_TraceID_Call
        + RunAndReturn(run <font color=blue>func</font>() string) *MockContext_TraceID_Call

    }
    class MockContext_Value_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(<font color=blue>interface</font>{}) ) *MockContext_Value_Call
        + Return(_a0 <font color=blue>interface</font>{}) *MockContext_Value_Call
        + RunAndReturn(run <font color=blue>func</font>(<font color=blue>interface</font>{}) <font color=blue>interface</font>{}) *MockContext_Value_Call

    }
    class MockContext_WithValue_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(<font color=blue>interface</font>{}, <font color=blue>interface</font>{}) ) *MockContext_WithValue_Call
        + Return() *MockContext_WithValue_Call
        + RunAndReturn(run <font color=blue>func</font>(<font color=blue>interface</font>{}, <font color=blue>interface</font>{}) ) *MockContext_WithValue_Call

    }
    class appContext << (S,Aquamarine) >> {
        - logger logwrapper.LoggerWrapper
        - defaultBackgroundContext context.Context
        - ginContext *gin.Context

        + SetLogger(logger logwrapper.LoggerWrapper) 
        + Logger() logwrapper.LoggerWrapper
        + Context() context.Context
        + Done() 
        + TraceID() string
        + SpanID() string
        + WithValue(key <font color=blue>interface</font>{}, val <font color=blue>interface</font>{}) 
        + Value(key <font color=blue>interface</font>{}) <font color=blue>interface</font>{}
        + TTL() *int64

    }
    class appcontext.ContextKey << (T, #FF7700) >>  {
    }
    class fake << (S,Aquamarine) >> {
        - logger logwrapper.LoggerWrapper

        + SetLogger(logger logwrapper.LoggerWrapper) 
        + Logger() logwrapper.LoggerWrapper
        + Context() context.Context
        + TraceID() string
        + SpanID() string
        + Done() 
        + WithValue(key <font color=blue>interface</font>{}, val <font color=blue>interface</font>{}) 
        + Value(key <font color=blue>interface</font>{}) <font color=blue>interface</font>{}
        + TTL() *int64

    }
    interface mockConstructorTestingTNewMockContext  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
}
"mock.Mock" *-- "appcontext.MockContext"
"mock.Call" *-- "appcontext.MockContext_Context_Call"
"mock.Call" *-- "appcontext.MockContext_Done_Call"
"mock.Call" *-- "appcontext.MockContext_Logger_Call"
"mock.Call" *-- "appcontext.MockContext_SetLogger_Call"
"mock.Call" *-- "appcontext.MockContext_SpanID_Call"
"mock.Call" *-- "appcontext.MockContext_TTL_Call"
"mock.Call" *-- "appcontext.MockContext_TraceID_Call"
"mock.Call" *-- "appcontext.MockContext_Value_Call"
"mock.Call" *-- "appcontext.MockContext_WithValue_Call"

"appcontext.Context" <|-- "appcontext.MockContext"
"appcontext.Context" <|-- "appcontext.appContext"
"appcontext.Context" <|-- "appcontext.fake"

namespace communicatorapi {
    class AuthenticationResponseDTO << (S,Aquamarine) >> {
        + IdToken string
        + TokenType string
        + ExpiresIn int

    }
    class CommunicatorAPIMock << (S,Aquamarine) >> {
        - authentication(message string) error

        + SendMessage(ctx appcontext.Context, msg publisher.MessageDTO) (string, error)

    }
    class ContextVars << (S,Aquamarine) >> {
        + Title string
        + Link string
        + StartedAt string

    }
    class Input << (S,Aquamarine) >> {
        + Endpoint string
        + EnableTrace bool
        + OCSIMEndpoint string
        + OCSIMClientID string
        + OCSIMClientSecret string
        + OCSIMGrantType string
        + Sender string

    }
    class NotificationPostDTO << (S,Aquamarine) >> {
        + Template string
        + ContextVars ContextVars
        + Receiver string
        + Sender string
        + ReceiverType string

    }
    class NotificationResponseDTO << (S,Aquamarine) >> {
        + ID string
        + Template string
        + ContextVars ContextVars
        + Body string
        + Receiver string
        + ReceiverType string
        + CreatedAt time.Time
        + UpdatedAt time.Time
        + Caller string
        + Region string
        + Sender string

    }
    class communicatorAPI << (S,Aquamarine) >> {
        - endpoint string
        - comunicatorClient *resty.Client
        - ocsimClient *resty.Client
        - enableTrace bool
        - ocsimEndpoint string
        - ocsimClientID string
        - ocsimClientSecret string
        - ocsimGrantType string
        - sender string

        - sendMessage(ctx appcontext.Context, bearer string, body *NotificationPostDTO, result *NotificationResponseDTO) (*resty.Response, error)
        - authentication(ctx appcontext.Context) (string, error)
        - debugPrint(ctx appcontext.Context, resp *resty.Response) 

        + SendMessage(ctx appcontext.Context, msg publisher.MessageDTO) (*publisher.SendMessageDTO, error)

    }
}

"publisher.Sender" <|-- "communicatorapi.communicatorAPI"

namespace database {
    interface DynamoDB  {
        + FindItem(key string, out <font color=blue>interface</font>{}) error
        + Upsert(key string, data <font color=blue>interface</font>{}) (*<font color=blue>interface</font>{}, error)

    }
    interface MemoryDatabase  {
        + Delete( string) error

    }
    class MockDynamoDB << (S,Aquamarine) >> {
        + EXPECT() *MockDynamoDB_Expecter
        + FindItem(key string, out <font color=blue>interface</font>{}) error
        + Upsert(key string, data <font color=blue>interface</font>{}) (*<font color=blue>interface</font>{}, error)

    }
    class MockDynamoDB_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + FindItem(key <font color=blue>interface</font>{}, out <font color=blue>interface</font>{}) *MockDynamoDB_FindItem_Call
        + Upsert(key <font color=blue>interface</font>{}, data <font color=blue>interface</font>{}) *MockDynamoDB_Upsert_Call

    }
    class MockDynamoDB_FindItem_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string, <font color=blue>interface</font>{}) ) *MockDynamoDB_FindItem_Call
        + Return(_a0 error) *MockDynamoDB_FindItem_Call
        + RunAndReturn(run <font color=blue>func</font>(string, <font color=blue>interface</font>{}) error) *MockDynamoDB_FindItem_Call

    }
    class MockDynamoDB_Upsert_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string, <font color=blue>interface</font>{}) ) *MockDynamoDB_Upsert_Call
        + Return(_a0 *<font color=blue>interface</font>{}, _a1 error) *MockDynamoDB_Upsert_Call
        + RunAndReturn(run <font color=blue>func</font>(string, <font color=blue>interface</font>{}) (*<font color=blue>interface</font>{}, error)) *MockDynamoDB_Upsert_Call

    }
    class MockMemoryDatabase << (S,Aquamarine) >> {
        + EXPECT() *MockMemoryDatabase_Expecter
        + Delete(_a0 string) error
        + FindItem(key string, out <font color=blue>interface</font>{}) error
        + Upsert(key string, data <font color=blue>interface</font>{}) (*<font color=blue>interface</font>{}, error)

    }
    class MockMemoryDatabase_Delete_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string) ) *MockMemoryDatabase_Delete_Call
        + Return(_a0 error) *MockMemoryDatabase_Delete_Call
        + RunAndReturn(run <font color=blue>func</font>(string) error) *MockMemoryDatabase_Delete_Call

    }
    class MockMemoryDatabase_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + Delete(_a0 <font color=blue>interface</font>{}) *MockMemoryDatabase_Delete_Call
        + FindItem(key <font color=blue>interface</font>{}, out <font color=blue>interface</font>{}) *MockMemoryDatabase_FindItem_Call
        + Upsert(key <font color=blue>interface</font>{}, data <font color=blue>interface</font>{}) *MockMemoryDatabase_Upsert_Call

    }
    class MockMemoryDatabase_FindItem_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string, <font color=blue>interface</font>{}) ) *MockMemoryDatabase_FindItem_Call
        + Return(_a0 error) *MockMemoryDatabase_FindItem_Call
        + RunAndReturn(run <font color=blue>func</font>(string, <font color=blue>interface</font>{}) error) *MockMemoryDatabase_FindItem_Call

    }
    class MockMemoryDatabase_Upsert_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string, <font color=blue>interface</font>{}) ) *MockMemoryDatabase_Upsert_Call
        + Return(_a0 *<font color=blue>interface</font>{}, _a1 error) *MockMemoryDatabase_Upsert_Call
        + RunAndReturn(run <font color=blue>func</font>(string, <font color=blue>interface</font>{}) (*<font color=blue>interface</font>{}, error)) *MockMemoryDatabase_Upsert_Call

    }
    class dynamoDB << (S,Aquamarine) >> {
        - tableName string
        - db *dynamodb.Client

        - upsert(key string, data <font color=blue>interface</font>{}) (*<font color=blue>interface</font>{}, error)

        + FindItem(key string, out <font color=blue>interface</font>{}) error
        + Upsert(key string, data <font color=blue>interface</font>{}) (*<font color=blue>interface</font>{}, error)

    }
    class memoryDatabase << (S,Aquamarine) >> {
        - records <font color=blue>map</font>[string]<font color=blue>interface</font>{}

        + FindItem(key string, out <font color=blue>interface</font>{}) error
        + InsertMsisdn(namesapce string, msisdn string) 
        + Upsert(key string, data <font color=blue>interface</font>{}) (*<font color=blue>interface</font>{}, error)
        + Delete(key string) error

    }
    interface mockConstructorTestingTNewMockDynamoDB  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockMemoryDatabase  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
}
"database.DynamoDB" *-- "database.MemoryDatabase"
"mock.Mock" *-- "database.MockDynamoDB"
"mock.Call" *-- "database.MockDynamoDB_FindItem_Call"
"mock.Call" *-- "database.MockDynamoDB_Upsert_Call"
"mock.Mock" *-- "database.MockMemoryDatabase"
"mock.Call" *-- "database.MockMemoryDatabase_Delete_Call"
"mock.Call" *-- "database.MockMemoryDatabase_FindItem_Call"
"mock.Call" *-- "database.MockMemoryDatabase_Upsert_Call"

"database.DynamoDB" <|-- "database.MockDynamoDB"
"database.DynamoDB" <|-- "database.MockMemoryDatabase"
"database.MemoryDatabase" <|-- "database.MockMemoryDatabase"
"database.DynamoDB" <|-- "database.dynamoDB"
"database.DynamoDB" <|-- "database.memoryDatabase"
"database.MemoryDatabase" <|-- "database.memoryDatabase"

namespace environment {
    class Single << (S,Aquamarine) >> {
        + ENVIRONMENT string
        + APP_VERSION string
        + APP_PORT string
        + APP_URL string
        + AWS_ENDPOINT string
        + AWS_REGION string
        + AWS_SQS_URL string
        + AWS_PROFILE string
        + LOG_LEVEL string
        + TIME_TO_WAITING_MINUTES int
        + DYNAMO_AWS_ENDPOINT string
        + DYNAMO_TABLE_NAME string
        + SQS_AWS_ENDPOINT string
        + INTERVAL_GET_KEYS_TO_CREATE int64
        + COMMUNICATOR_API_URL string
        + COMMUNICATOR_API_TEMPLATE string
        + COMMUNICATOR_API_SENDER string
        + COMMUNICATOR_API_RECEIVER string
        + OCSIM_URL string
        + OCSIM_CLIENT_ID string
        + OCSIM_CLIENT_SECRET string
        + OCSIM_GRANT_TYPE string
        + TOKEN string
        + ALLOWED_AGENTS string
        + FOWARDED_HOST string
        + ONLY_CRITICAL_ALERTS string
        + GRAFANA_ONCALL_ALERT_TTL string

        + Setup() 
        + IsDevelopment() bool

    }
}


namespace exception {
    class DomainError << (S,Aquamarine) >> {
        + StatusCode int
        + Err error
        + Retryable bool
        + Message string

        + Error() string

    }
    class domainError << (S,Aquamarine) >> {
        + StatusCode int
        + Description string
        + Retryable bool

    }
}


namespace grafanaoncall {
    interface CollectCounteror  {
        + CollectCounter(labels <font color=blue>map</font>[string]string) 

    }
    class GrafanaAlertDTO << (S,Aquamarine) >> {
        + Fingerprint string
        + Title string
        + Namespace string
        + Priority string
        + Link string
        + CreatedAt int64
        + GeneratorURL string

        + IsCritical() bool
        + ConvertToAlertDTO() publishmanager.AlertDTO

    }
    class GrafanaOnCall << (S,Aquamarine) >> {
    }
    class GrafanaOncallAlert << (S,Aquamarine) >> {
        + Annotations <font color=blue>struct</font>{string}
        + EndsAt time.Time
        + GeneratorURL string
        + Labels <font color=blue>struct</font>{string, string, string, string}
        + StartsAt time.Time
        + Status string
        + Fingerprint string

        + ConvertToPublishManagerAlertDTO() grafanaoncall.GrafanaAlertDTO

    }
    class Input << (S,Aquamarine) >> {
        + PublishManager publishmanager.PublishManager
        + MsisdnRepository msisdn.Repository
        + MetricCollector MetricCollector

    }
    interface MetricCollector  {
    }
    class MockCollectCounteror << (S,Aquamarine) >> {
        + EXPECT() *MockCollectCounteror_Expecter
        + CollectCounter(labels <font color=blue>map</font>[string]string) 

    }
    class MockCollectCounteror_CollectCounter_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(<font color=blue>map</font>[string]string) ) *MockCollectCounteror_CollectCounter_Call
        + Return() *MockCollectCounteror_CollectCounter_Call
        + RunAndReturn(run <font color=blue>func</font>(<font color=blue>map</font>[string]string) ) *MockCollectCounteror_CollectCounter_Call

    }
    class MockCollectCounteror_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + CollectCounter(labels <font color=blue>interface</font>{}) *MockCollectCounteror_CollectCounter_Call

    }
    class MockMetricCollector << (S,Aquamarine) >> {
        + EXPECT() *MockMetricCollector_Expecter
        + CollectCounter(labels <font color=blue>map</font>[string]string) 

    }
    class MockMetricCollector_CollectCounter_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(<font color=blue>map</font>[string]string) ) *MockMetricCollector_CollectCounter_Call
        + Return() *MockMetricCollector_CollectCounter_Call
        + RunAndReturn(run <font color=blue>func</font>(<font color=blue>map</font>[string]string) ) *MockMetricCollector_CollectCounter_Call

    }
    class MockMetricCollector_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + CollectCounter(labels <font color=blue>interface</font>{}) *MockMetricCollector_CollectCounter_Call

    }
    class MockNotificationSender << (S,Aquamarine) >> {
        + EXPECT() *MockNotificationSender_Expecter
        + SendMessage(ctx appcontext.Context, grafanaDTO GrafanaAlertDTO, toTeam bool, profile string) (*SendMessageResponse, error)

    }
    class MockNotificationSender_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + SendMessage(ctx <font color=blue>interface</font>{}, grafanaDTO <font color=blue>interface</font>{}, toTeam <font color=blue>interface</font>{}, profile <font color=blue>interface</font>{}) *MockNotificationSender_SendMessage_Call

    }
    class MockNotificationSender_SendMessage_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(appcontext.Context, GrafanaAlertDTO, bool, string) ) *MockNotificationSender_SendMessage_Call
        + Return(_a0 *SendMessageResponse, _a1 error) *MockNotificationSender_SendMessage_Call
        + RunAndReturn(run <font color=blue>func</font>(appcontext.Context, GrafanaAlertDTO, bool, string) (*SendMessageResponse, error)) *MockNotificationSender_SendMessage_Call

    }
    class MockUseCases << (S,Aquamarine) >> {
        + EXPECT() *MockUseCases_Expecter
        + SendMessage(ctx appcontext.Context, grafanaDTO GrafanaAlertDTO, toTeam bool, profile string) (*SendMessageResponse, error)

    }
    class MockUseCases_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + SendMessage(ctx <font color=blue>interface</font>{}, grafanaDTO <font color=blue>interface</font>{}, toTeam <font color=blue>interface</font>{}, profile <font color=blue>interface</font>{}) *MockUseCases_SendMessage_Call

    }
    class MockUseCases_SendMessage_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(appcontext.Context, GrafanaAlertDTO, bool, string) ) *MockUseCases_SendMessage_Call
        + Return(_a0 *SendMessageResponse, _a1 error) *MockUseCases_SendMessage_Call
        + RunAndReturn(run <font color=blue>func</font>(appcontext.Context, GrafanaAlertDTO, bool, string) (*SendMessageResponse, error)) *MockUseCases_SendMessage_Call

    }
    interface NotificationSender  {
        + SendMessage(ctx appcontext.Context, grafanaDTO GrafanaAlertDTO, toTeam bool, profile string) (*SendMessageResponse, error)

    }
    class SendMessageResponse << (S,Aquamarine) >> {
        + Data []SendMessageResponseData

    }
    class SendMessageResponseData << (S,Aquamarine) >> {
        + Message string

    }
    interface UseCases  {
    }
    class grafanaoncall.From << (T, #FF7700) >>  {
    }
    class grafaoncall << (S,Aquamarine) >> {
        - publishManager publishmanager.PublishManager
        - msisdnRepository msisdn.Repository
        - metricCollector MetricCollector

        - findMsisdnList(ctx appcontext.Context, grafanaDTO GrafanaAlertDTO, toTeam bool, profile string) (*msisdn.FindAllResponse, error)
        - findProfileMsisdnList(ctx appcontext.Context, profile string) (*msisdn.FindAllResponse, error)
        - findTeamMsisdnList(ctx appcontext.Context, target string, profile string) (*msisdn.FindAllResponse, error)
        - createCounter(grafanaDTO GrafanaAlertDTO, receiverMsisdn msisdn.Msisdn, profile string) <font color=blue>func</font>(string) 

        + SendMessage(ctx appcontext.Context, grafanaDTO GrafanaAlertDTO, toTeam bool, profile string) (*SendMessageResponse, error)

    }
    interface mockConstructorTestingTNewMockCollectCounteror  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockMetricCollector  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockNotificationSender  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockUseCases  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
}
"grafanaoncall.CollectCounteror" *-- "grafanaoncall.MetricCollector"
"mock.Mock" *-- "grafanaoncall.MockCollectCounteror"
"mock.Call" *-- "grafanaoncall.MockCollectCounteror_CollectCounter_Call"
"mock.Mock" *-- "grafanaoncall.MockMetricCollector"
"mock.Call" *-- "grafanaoncall.MockMetricCollector_CollectCounter_Call"
"mock.Mock" *-- "grafanaoncall.MockNotificationSender"
"mock.Call" *-- "grafanaoncall.MockNotificationSender_SendMessage_Call"
"mock.Mock" *-- "grafanaoncall.MockUseCases"
"mock.Call" *-- "grafanaoncall.MockUseCases_SendMessage_Call"
"grafanaoncall.NotificationSender" *-- "grafanaoncall.UseCases"

"grafanaoncall.CollectCounteror" <|-- "grafanaoncall.MockCollectCounteror"
"publishmanager.CollectCounteror" <|-- "grafanaoncall.MockCollectCounteror"
"grafanaoncall.CollectCounteror" <|-- "grafanaoncall.MockMetricCollector"
"publishmanager.CollectCounteror" <|-- "grafanaoncall.MockMetricCollector"
"grafanaoncall.NotificationSender" <|-- "grafanaoncall.MockNotificationSender"
"grafanaoncall.NotificationSender" <|-- "grafanaoncall.MockUseCases"
"grafanaoncall.NotificationSender" <|-- "grafanaoncall.grafaoncall"

namespace logwrapper {
    interface Logger  {
        + Info(msg string, fields ...zap.Field) 
        + Error(msg string, fields ...zap.Field) 
        + Warn(msg string, fields ...zap.Field) 
        + Fatal(msg string, fields ...zap.Field) 
        + Debug(msg string, fields ...zap.Field) 

    }
    interface LoggerWrapper  {
        + SetTraceID(v string) LoggerWrapper
        + SetVersion(v string) LoggerWrapper
        + CreateSpan() LoggerWrapper
        + RemoveSpan() LoggerWrapper
        + TraceID() string
        + Version() string
        + Span() *Span

    }
    class MockLogger << (S,Aquamarine) >> {
        + EXPECT() *MockLogger_Expecter
        + Debug(msg string, fields ...zapcore.Field) 
        + Error(msg string, fields ...zapcore.Field) 
        + Fatal(msg string, fields ...zapcore.Field) 
        + Info(msg string, fields ...zapcore.Field) 
        + Warn(msg string, fields ...zapcore.Field) 

    }
    class MockLoggerWrapper << (S,Aquamarine) >> {
        + EXPECT() *MockLoggerWrapper_Expecter
        + CreateSpan() LoggerWrapper
        + Debug(msg string, fields ...zapcore.Field) 
        + Error(msg string, fields ...zapcore.Field) 
        + Fatal(msg string, fields ...zapcore.Field) 
        + Info(msg string, fields ...zapcore.Field) 
        + RemoveSpan() LoggerWrapper
        + SetTraceID(v string) LoggerWrapper
        + SetVersion(v string) LoggerWrapper
        + Span() *Span
        + TraceID() string
        + Version() string
        + Warn(msg string, fields ...zapcore.Field) 

    }
    class MockLoggerWrapper_CreateSpan_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockLoggerWrapper_CreateSpan_Call
        + Return(_a0 LoggerWrapper) *MockLoggerWrapper_CreateSpan_Call
        + RunAndReturn(run <font color=blue>func</font>() LoggerWrapper) *MockLoggerWrapper_CreateSpan_Call

    }
    class MockLoggerWrapper_Debug_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLoggerWrapper_Debug_Call
        + Return() *MockLoggerWrapper_Debug_Call
        + RunAndReturn(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLoggerWrapper_Debug_Call

    }
    class MockLoggerWrapper_Error_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLoggerWrapper_Error_Call
        + Return() *MockLoggerWrapper_Error_Call
        + RunAndReturn(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLoggerWrapper_Error_Call

    }
    class MockLoggerWrapper_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + CreateSpan() *MockLoggerWrapper_CreateSpan_Call
        + Debug(msg <font color=blue>interface</font>{}, fields ...<font color=blue>interface</font>{}) *MockLoggerWrapper_Debug_Call
        + Error(msg <font color=blue>interface</font>{}, fields ...<font color=blue>interface</font>{}) *MockLoggerWrapper_Error_Call
        + Fatal(msg <font color=blue>interface</font>{}, fields ...<font color=blue>interface</font>{}) *MockLoggerWrapper_Fatal_Call
        + Info(msg <font color=blue>interface</font>{}, fields ...<font color=blue>interface</font>{}) *MockLoggerWrapper_Info_Call
        + RemoveSpan() *MockLoggerWrapper_RemoveSpan_Call
        + SetTraceID(v <font color=blue>interface</font>{}) *MockLoggerWrapper_SetTraceID_Call
        + SetVersion(v <font color=blue>interface</font>{}) *MockLoggerWrapper_SetVersion_Call
        + Span() *MockLoggerWrapper_Span_Call
        + TraceID() *MockLoggerWrapper_TraceID_Call
        + Version() *MockLoggerWrapper_Version_Call
        + Warn(msg <font color=blue>interface</font>{}, fields ...<font color=blue>interface</font>{}) *MockLoggerWrapper_Warn_Call

    }
    class MockLoggerWrapper_Fatal_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLoggerWrapper_Fatal_Call
        + Return() *MockLoggerWrapper_Fatal_Call
        + RunAndReturn(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLoggerWrapper_Fatal_Call

    }
    class MockLoggerWrapper_Info_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLoggerWrapper_Info_Call
        + Return() *MockLoggerWrapper_Info_Call
        + RunAndReturn(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLoggerWrapper_Info_Call

    }
    class MockLoggerWrapper_RemoveSpan_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockLoggerWrapper_RemoveSpan_Call
        + Return(_a0 LoggerWrapper) *MockLoggerWrapper_RemoveSpan_Call
        + RunAndReturn(run <font color=blue>func</font>() LoggerWrapper) *MockLoggerWrapper_RemoveSpan_Call

    }
    class MockLoggerWrapper_SetTraceID_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string) ) *MockLoggerWrapper_SetTraceID_Call
        + Return(_a0 LoggerWrapper) *MockLoggerWrapper_SetTraceID_Call
        + RunAndReturn(run <font color=blue>func</font>(string) LoggerWrapper) *MockLoggerWrapper_SetTraceID_Call

    }
    class MockLoggerWrapper_SetVersion_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string) ) *MockLoggerWrapper_SetVersion_Call
        + Return(_a0 LoggerWrapper) *MockLoggerWrapper_SetVersion_Call
        + RunAndReturn(run <font color=blue>func</font>(string) LoggerWrapper) *MockLoggerWrapper_SetVersion_Call

    }
    class MockLoggerWrapper_Span_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockLoggerWrapper_Span_Call
        + Return(_a0 *Span) *MockLoggerWrapper_Span_Call
        + RunAndReturn(run <font color=blue>func</font>() *Span) *MockLoggerWrapper_Span_Call

    }
    class MockLoggerWrapper_TraceID_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockLoggerWrapper_TraceID_Call
        + Return(_a0 string) *MockLoggerWrapper_TraceID_Call
        + RunAndReturn(run <font color=blue>func</font>() string) *MockLoggerWrapper_TraceID_Call

    }
    class MockLoggerWrapper_Version_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockLoggerWrapper_Version_Call
        + Return(_a0 string) *MockLoggerWrapper_Version_Call
        + RunAndReturn(run <font color=blue>func</font>() string) *MockLoggerWrapper_Version_Call

    }
    class MockLoggerWrapper_Warn_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLoggerWrapper_Warn_Call
        + Return() *MockLoggerWrapper_Warn_Call
        + RunAndReturn(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLoggerWrapper_Warn_Call

    }
    class MockLogger_Debug_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLogger_Debug_Call
        + Return() *MockLogger_Debug_Call
        + RunAndReturn(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLogger_Debug_Call

    }
    class MockLogger_Error_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLogger_Error_Call
        + Return() *MockLogger_Error_Call
        + RunAndReturn(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLogger_Error_Call

    }
    class MockLogger_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + Debug(msg <font color=blue>interface</font>{}, fields ...<font color=blue>interface</font>{}) *MockLogger_Debug_Call
        + Error(msg <font color=blue>interface</font>{}, fields ...<font color=blue>interface</font>{}) *MockLogger_Error_Call
        + Fatal(msg <font color=blue>interface</font>{}, fields ...<font color=blue>interface</font>{}) *MockLogger_Fatal_Call
        + Info(msg <font color=blue>interface</font>{}, fields ...<font color=blue>interface</font>{}) *MockLogger_Info_Call
        + Warn(msg <font color=blue>interface</font>{}, fields ...<font color=blue>interface</font>{}) *MockLogger_Warn_Call

    }
    class MockLogger_Fatal_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLogger_Fatal_Call
        + Return() *MockLogger_Fatal_Call
        + RunAndReturn(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLogger_Fatal_Call

    }
    class MockLogger_Info_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLogger_Info_Call
        + Return() *MockLogger_Info_Call
        + RunAndReturn(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLogger_Info_Call

    }
    class MockLogger_Warn_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLogger_Warn_Call
        + Return() *MockLogger_Warn_Call
        + RunAndReturn(run <font color=blue>func</font>(string, ...zapcore.Field) ) *MockLogger_Warn_Call

    }
    class Span << (S,Aquamarine) >> {
        - parent *Span

        + ID string

    }
    class Zap << (S,Aquamarine) >> {
        + Logger zap.Logger

        + Info(msg string, fields ...zap.Field) 
        + Warn(msg string, fields ...zap.Field) 
        + Error(msg string, fields ...zap.Field) 
        + Fatal(msg string, fields ...zap.Field) 
        + Debug(msg string, fields ...zap.Field) 

    }
    class fake << (S,Aquamarine) >> {
        + SetTraceID(v string) LoggerWrapper
        + TraceID() string
        + SetVersion(v string) LoggerWrapper
        + Version() string
        + CreateSpan() LoggerWrapper
        + RemoveSpan() LoggerWrapper
        + Span() *Span
        + Info(msg string, fields ...zap.Field) 
        + Warn(msg string, fields ...zap.Field) 
        + Error(msg string, fields ...zap.Field) 
        + Fatal(msg string, fields ...zap.Field) 
        + Debug(msg string, fields ...zap.Field) 

    }
    class logWrapper << (S,Aquamarine) >> {
        - logger Logger
        - traceID string
        - span *Span
        - version string

        - clone() LoggerWrapper
        - mergeField(fields ...zap.Field) []zap.Field

        + SetTraceID(v string) LoggerWrapper
        + TraceID() string
        + SetVersion(v string) LoggerWrapper
        + Version() string
        + Span() *Span
        + CreateSpan() LoggerWrapper
        + RemoveSpan() LoggerWrapper
        + Info(msg string, fields ...zap.Field) 
        + Warn(msg string, fields ...zap.Field) 
        + Error(msg string, fields ...zap.Field) 
        + Fatal(msg string, fields ...zap.Field) 
        + Debug(msg string, fields ...zap.Field) 

    }
    interface mockConstructorTestingTNewMockLogger  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockLoggerWrapper  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
}
"logwrapper.Logger" *-- "logwrapper.LoggerWrapper"
"mock.Mock" *-- "logwrapper.MockLogger"
"mock.Mock" *-- "logwrapper.MockLoggerWrapper"
"mock.Call" *-- "logwrapper.MockLoggerWrapper_CreateSpan_Call"
"mock.Call" *-- "logwrapper.MockLoggerWrapper_Debug_Call"
"mock.Call" *-- "logwrapper.MockLoggerWrapper_Error_Call"
"mock.Call" *-- "logwrapper.MockLoggerWrapper_Fatal_Call"
"mock.Call" *-- "logwrapper.MockLoggerWrapper_Info_Call"
"mock.Call" *-- "logwrapper.MockLoggerWrapper_RemoveSpan_Call"
"mock.Call" *-- "logwrapper.MockLoggerWrapper_SetTraceID_Call"
"mock.Call" *-- "logwrapper.MockLoggerWrapper_SetVersion_Call"
"mock.Call" *-- "logwrapper.MockLoggerWrapper_Span_Call"
"mock.Call" *-- "logwrapper.MockLoggerWrapper_TraceID_Call"
"mock.Call" *-- "logwrapper.MockLoggerWrapper_Version_Call"
"mock.Call" *-- "logwrapper.MockLoggerWrapper_Warn_Call"
"mock.Call" *-- "logwrapper.MockLogger_Debug_Call"
"mock.Call" *-- "logwrapper.MockLogger_Error_Call"
"mock.Call" *-- "logwrapper.MockLogger_Fatal_Call"
"mock.Call" *-- "logwrapper.MockLogger_Info_Call"
"mock.Call" *-- "logwrapper.MockLogger_Warn_Call"

"logwrapper.LoggerWrapper" <|-- "logwrapper.MockLoggerWrapper"
"logwrapper.Logger" <|-- "logwrapper.Zap"
"logwrapper.Logger" <|-- "logwrapper.fake"
"logwrapper.LoggerWrapper" <|-- "logwrapper.fake"
"logwrapper.Logger" <|-- "logwrapper.logWrapper"
"logwrapper.LoggerWrapper" <|-- "logwrapper.logWrapper"

namespace metric {
    interface Counter  {
        + Inc() 

    }
    class HTTP << (S,Aquamarine) >> {
        + Handler string
        + Method string
        + StatusCode string
        + StartedAt time.Time
        + FinishedAt time.Time
        + Duration float64

        + Started() 
        + Finished() 

    }
    interface Histogram  {
        + Started() 
        + Finished(lvs ...string) 
        + Success() 
        + Error() 

    }
    interface HistogramVec  {
        + Start() HistogramVec
        + Finished(constLabels <font color=blue>map</font>[string]string) 
        + Success() 
        + Error(code string) 
        + With( prometheus.Labels) prometheus.Observer
        + Observe( float64,  prometheus.Labels) 

    }
    class MockCounter << (S,Aquamarine) >> {
        + EXPECT() *MockCounter_Expecter
        + Inc() 

    }
    class MockCounter_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + Inc() *MockCounter_Inc_Call

    }
    class MockCounter_Inc_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockCounter_Inc_Call
        + Return() *MockCounter_Inc_Call
        + RunAndReturn(run <font color=blue>func</font>() ) *MockCounter_Inc_Call

    }
    class MockHistogram << (S,Aquamarine) >> {
        + EXPECT() *MockHistogram_Expecter
        + Error() 
        + Finished(lvs ...string) 
        + Started() 
        + Success() 

    }
    class MockHistogramVec << (S,Aquamarine) >> {
        + EXPECT() *MockHistogramVec_Expecter
        + Error(code string) 
        + Finished(constLabels <font color=blue>map</font>[string]string) 
        + Observe(_a0 float64, _a1 prometheus.Labels) 
        + Start() HistogramVec
        + Success() 
        + With(_a0 prometheus.Labels) prometheus.Observer

    }
    class MockHistogramVec_Error_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string) ) *MockHistogramVec_Error_Call
        + Return() *MockHistogramVec_Error_Call
        + RunAndReturn(run <font color=blue>func</font>(string) ) *MockHistogramVec_Error_Call

    }
    class MockHistogramVec_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + Error(code <font color=blue>interface</font>{}) *MockHistogramVec_Error_Call
        + Finished(constLabels <font color=blue>interface</font>{}) *MockHistogramVec_Finished_Call
        + Observe(_a0 <font color=blue>interface</font>{}, _a1 <font color=blue>interface</font>{}) *MockHistogramVec_Observe_Call
        + Start() *MockHistogramVec_Start_Call
        + Success() *MockHistogramVec_Success_Call
        + With(_a0 <font color=blue>interface</font>{}) *MockHistogramVec_With_Call

    }
    class MockHistogramVec_Finished_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(<font color=blue>map</font>[string]string) ) *MockHistogramVec_Finished_Call
        + Return() *MockHistogramVec_Finished_Call
        + RunAndReturn(run <font color=blue>func</font>(<font color=blue>map</font>[string]string) ) *MockHistogramVec_Finished_Call

    }
    class MockHistogramVec_Observe_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(float64, prometheus.Labels) ) *MockHistogramVec_Observe_Call
        + Return() *MockHistogramVec_Observe_Call
        + RunAndReturn(run <font color=blue>func</font>(float64, prometheus.Labels) ) *MockHistogramVec_Observe_Call

    }
    class MockHistogramVec_Start_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockHistogramVec_Start_Call
        + Return(_a0 HistogramVec) *MockHistogramVec_Start_Call
        + RunAndReturn(run <font color=blue>func</font>() HistogramVec) *MockHistogramVec_Start_Call

    }
    class MockHistogramVec_Success_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockHistogramVec_Success_Call
        + Return() *MockHistogramVec_Success_Call
        + RunAndReturn(run <font color=blue>func</font>() ) *MockHistogramVec_Success_Call

    }
    class MockHistogramVec_With_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(prometheus.Labels) ) *MockHistogramVec_With_Call
        + Return(_a0 prometheus.Observer) *MockHistogramVec_With_Call
        + RunAndReturn(run <font color=blue>func</font>(prometheus.Labels) prometheus.Observer) *MockHistogramVec_With_Call

    }
    class MockHistogram_Error_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockHistogram_Error_Call
        + Return() *MockHistogram_Error_Call
        + RunAndReturn(run <font color=blue>func</font>() ) *MockHistogram_Error_Call

    }
    class MockHistogram_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + Error() *MockHistogram_Error_Call
        + Finished(lvs ...<font color=blue>interface</font>{}) *MockHistogram_Finished_Call
        + Started() *MockHistogram_Started_Call
        + Success() *MockHistogram_Success_Call

    }
    class MockHistogram_Finished_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(...string) ) *MockHistogram_Finished_Call
        + Return() *MockHistogram_Finished_Call
        + RunAndReturn(run <font color=blue>func</font>(...string) ) *MockHistogram_Finished_Call

    }
    class MockHistogram_Started_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockHistogram_Started_Call
        + Return() *MockHistogram_Started_Call
        + RunAndReturn(run <font color=blue>func</font>() ) *MockHistogram_Started_Call

    }
    class MockHistogram_Success_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockHistogram_Success_Call
        + Return() *MockHistogram_Success_Call
        + RunAndReturn(run <font color=blue>func</font>() ) *MockHistogram_Success_Call

    }
    class MockPrometheusCounterBuilder << (S,Aquamarine) >> {
        + EXPECT() *MockPrometheusCounterBuilder_Expecter
        + BuildCounterVec() (*prometheus.CounterVec, error)
        + BuildHistogramVec() (HistogramVec, error)
        + ConstLabels(_a0 <font color=blue>map</font>[string]string) PrometheusCounterBuilder
        + Description(_a0 string) PrometheusCounterBuilder
        + LabelNames(_a0 []string) PrometheusCounterBuilder
        + Name(_a0 string) PrometheusCounterBuilder
        + Namespace(_a0 string) PrometheusCounterBuilder

    }
    class MockPrometheusCounterBuilder_BuildCounterVec_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockPrometheusCounterBuilder_BuildCounterVec_Call
        + Return(_a0 *prometheus.CounterVec, _a1 error) *MockPrometheusCounterBuilder_BuildCounterVec_Call
        + RunAndReturn(run <font color=blue>func</font>() (*prometheus.CounterVec, error)) *MockPrometheusCounterBuilder_BuildCounterVec_Call

    }
    class MockPrometheusCounterBuilder_BuildHistogramVec_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockPrometheusCounterBuilder_BuildHistogramVec_Call
        + Return(_a0 HistogramVec, _a1 error) *MockPrometheusCounterBuilder_BuildHistogramVec_Call
        + RunAndReturn(run <font color=blue>func</font>() (HistogramVec, error)) *MockPrometheusCounterBuilder_BuildHistogramVec_Call

    }
    class MockPrometheusCounterBuilder_ConstLabels_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(<font color=blue>map</font>[string]string) ) *MockPrometheusCounterBuilder_ConstLabels_Call
        + Return(_a0 PrometheusCounterBuilder) *MockPrometheusCounterBuilder_ConstLabels_Call
        + RunAndReturn(run <font color=blue>func</font>(<font color=blue>map</font>[string]string) PrometheusCounterBuilder) *MockPrometheusCounterBuilder_ConstLabels_Call

    }
    class MockPrometheusCounterBuilder_Description_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string) ) *MockPrometheusCounterBuilder_Description_Call
        + Return(_a0 PrometheusCounterBuilder) *MockPrometheusCounterBuilder_Description_Call
        + RunAndReturn(run <font color=blue>func</font>(string) PrometheusCounterBuilder) *MockPrometheusCounterBuilder_Description_Call

    }
    class MockPrometheusCounterBuilder_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + BuildCounterVec() *MockPrometheusCounterBuilder_BuildCounterVec_Call
        + BuildHistogramVec() *MockPrometheusCounterBuilder_BuildHistogramVec_Call
        + ConstLabels(_a0 <font color=blue>interface</font>{}) *MockPrometheusCounterBuilder_ConstLabels_Call
        + Description(_a0 <font color=blue>interface</font>{}) *MockPrometheusCounterBuilder_Description_Call
        + LabelNames(_a0 <font color=blue>interface</font>{}) *MockPrometheusCounterBuilder_LabelNames_Call
        + Name(_a0 <font color=blue>interface</font>{}) *MockPrometheusCounterBuilder_Name_Call
        + Namespace(_a0 <font color=blue>interface</font>{}) *MockPrometheusCounterBuilder_Namespace_Call

    }
    class MockPrometheusCounterBuilder_LabelNames_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>([]string) ) *MockPrometheusCounterBuilder_LabelNames_Call
        + Return(_a0 PrometheusCounterBuilder) *MockPrometheusCounterBuilder_LabelNames_Call
        + RunAndReturn(run <font color=blue>func</font>([]string) PrometheusCounterBuilder) *MockPrometheusCounterBuilder_LabelNames_Call

    }
    class MockPrometheusCounterBuilder_Name_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string) ) *MockPrometheusCounterBuilder_Name_Call
        + Return(_a0 PrometheusCounterBuilder) *MockPrometheusCounterBuilder_Name_Call
        + RunAndReturn(run <font color=blue>func</font>(string) PrometheusCounterBuilder) *MockPrometheusCounterBuilder_Name_Call

    }
    class MockPrometheusCounterBuilder_Namespace_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string) ) *MockPrometheusCounterBuilder_Namespace_Call
        + Return(_a0 PrometheusCounterBuilder) *MockPrometheusCounterBuilder_Namespace_Call
        + RunAndReturn(run <font color=blue>func</font>(string) PrometheusCounterBuilder) *MockPrometheusCounterBuilder_Namespace_Call

    }
    class MockService << (S,Aquamarine) >> {
        + EXPECT() *MockService_Expecter
        + SaveHTTP(h *HTTP) 

    }
    class MockService_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + SaveHTTP(h <font color=blue>interface</font>{}) *MockService_SaveHTTP_Call

    }
    class MockService_SaveHTTP_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(*HTTP) ) *MockService_SaveHTTP_Call
        + Return() *MockService_SaveHTTP_Call
        + RunAndReturn(run <font color=blue>func</font>(*HTTP) ) *MockService_SaveHTTP_Call

    }
    interface PrometheusCounterBuilder  {
        + Namespace( string) PrometheusCounterBuilder
        + Name( string) PrometheusCounterBuilder
        + Description( string) PrometheusCounterBuilder
        + ConstLabels( <font color=blue>map</font>[string]string) PrometheusCounterBuilder
        + LabelNames( []string) PrometheusCounterBuilder
        + BuildCounterVec() (*prometheus.CounterVec, error)
        + BuildHistogramVec() (HistogramVec, error)

    }
    interface Service  {
        + SaveHTTP(h *HTTP) 

    }
    class counterObject << (S,Aquamarine) >> {
        - counter prometheus.Counter

        + Help string
        + Name string
        + ConstLabels <font color=blue>map</font>[string]string

        - init() error

        + Inc() 

    }
    class histogramObject << (S,Aquamarine) >> {
        - histogram *prometheus.HistogramVec
        - startedAt time.Time

        + Started() 
        + Finished(lvs ...string) 
        + Success() 
        + Error() 

    }
    class histogramVecObject << (S,Aquamarine) >> {
        - histogram *prometheus.HistogramVec
        - startedAt time.Time

        + Start() HistogramVec
        + Finished(labels <font color=blue>map</font>[string]string) 
        + Observe(duration float64, labels prometheus.Labels) 
        + With(labels prometheus.Labels) prometheus.Observer
        + Success() 
        + Error(code string) 

    }
    class metricCollector << (S,Aquamarine) >> {
        - histogramVec HistogramVec
        - counterVec *prometheus.CounterVec

        + CollectLatencyStart() publishmanager.LatencyCollector
        + CollectLatencyWithSuccess() 
        + CollectLatencyWithError(code string) 
        + CollectCounter(labels <font color=blue>map</font>[string]string) 

    }
    interface mockConstructorTestingTNewMockCounter  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockHistogram  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockHistogramVec  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockPrometheusCounterBuilder  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockService  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    class prometheusCounterBuilder << (S,Aquamarine) >> {
        - namespace string
        - name string
        - description string
        - constLabels <font color=blue>map</font>[string]string
        - labelNames []string
        - bukets []float64

        + Namespace(value string) PrometheusCounterBuilder
        + Name(value string) PrometheusCounterBuilder
        + Description(value string) PrometheusCounterBuilder
        + ConstLabels(value <font color=blue>map</font>[string]string) PrometheusCounterBuilder
        + LabelNames(value []string) PrometheusCounterBuilder
        + Bukets(value []float64) PrometheusCounterBuilder
        + BuildCounterVec() (*prometheus.CounterVec, error)
        + BuildHistogramVec() (HistogramVec, error)

    }
    class service << (S,Aquamarine) >> {
        - httpRequestHistogram *prometheus.HistogramVec

        + SaveHTTP(h *HTTP) 

    }
}
"mock.Mock" *-- "metric.MockCounter"
"mock.Call" *-- "metric.MockCounter_Inc_Call"
"mock.Mock" *-- "metric.MockHistogram"
"mock.Mock" *-- "metric.MockHistogramVec"
"mock.Call" *-- "metric.MockHistogramVec_Error_Call"
"mock.Call" *-- "metric.MockHistogramVec_Finished_Call"
"mock.Call" *-- "metric.MockHistogramVec_Observe_Call"
"mock.Call" *-- "metric.MockHistogramVec_Start_Call"
"mock.Call" *-- "metric.MockHistogramVec_Success_Call"
"mock.Call" *-- "metric.MockHistogramVec_With_Call"
"mock.Call" *-- "metric.MockHistogram_Error_Call"
"mock.Call" *-- "metric.MockHistogram_Finished_Call"
"mock.Call" *-- "metric.MockHistogram_Started_Call"
"mock.Call" *-- "metric.MockHistogram_Success_Call"
"mock.Mock" *-- "metric.MockPrometheusCounterBuilder"
"mock.Call" *-- "metric.MockPrometheusCounterBuilder_BuildCounterVec_Call"
"mock.Call" *-- "metric.MockPrometheusCounterBuilder_BuildHistogramVec_Call"
"mock.Call" *-- "metric.MockPrometheusCounterBuilder_ConstLabels_Call"
"mock.Call" *-- "metric.MockPrometheusCounterBuilder_Description_Call"
"mock.Call" *-- "metric.MockPrometheusCounterBuilder_LabelNames_Call"
"mock.Call" *-- "metric.MockPrometheusCounterBuilder_Name_Call"
"mock.Call" *-- "metric.MockPrometheusCounterBuilder_Namespace_Call"
"mock.Mock" *-- "metric.MockService"
"mock.Call" *-- "metric.MockService_SaveHTTP_Call"

"metric.Counter" <|-- "metric.MockCounter"
"metric.Histogram" <|-- "metric.MockHistogram"
"metric.HistogramVec" <|-- "metric.MockHistogramVec"
"metric.PrometheusCounterBuilder" <|-- "metric.MockPrometheusCounterBuilder"
"metric.Service" <|-- "metric.MockService"
"metric.Counter" <|-- "metric.counterObject"
"metric.Histogram" <|-- "metric.histogramObject"
"metric.HistogramVec" <|-- "metric.histogramVecObject"
"grafanaoncall.CollectCounteror" <|-- "metric.metricCollector"
"publishmanager.CollectCounteror" <|-- "metric.metricCollector"
"publishmanager.LatencyCollector" <|-- "metric.metricCollector"
"metric.PrometheusCounterBuilder" <|-- "metric.prometheusCounterBuilder"
"metric.Service" <|-- "metric.service"

namespace mock {
    class histogramObject << (S,Aquamarine) >> {
        + Started() 
        + Finished(lvs ...string) 
        + Success() 
        + Error() 

    }
    class mockCounterObject << (S,Aquamarine) >> {
        - init() error

        + Inc() 

    }
}

"metric.Histogram" <|-- "mock.histogramObject"
"metric.Counter" <|-- "mock.mockCounterObject"

namespace msisdn {
    class FindAllResponse << (S,Aquamarine) >> {
        + Data []FindAllResponseData

    }
    class FindAllResponseData << (S,Aquamarine) >> {
        + Msisdn Msisdn
        + Err error

    }
    class MockRepository << (S,Aquamarine) >> {
        + EXPECT() *MockRepository_Expecter
        + FindAll(_a0 string, _a1 string) (*FindAllResponse, error)

    }
    class MockRepositoryReader << (S,Aquamarine) >> {
        + EXPECT() *MockRepositoryReader_Expecter
        + FindAll(_a0 string, _a1 string) (*FindAllResponse, error)

    }
    class MockRepositoryReader_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + FindAll(_a0 <font color=blue>interface</font>{}, _a1 <font color=blue>interface</font>{}) *MockRepositoryReader_FindAll_Call

    }
    class MockRepositoryReader_FindAll_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string, string) ) *MockRepositoryReader_FindAll_Call
        + Return(_a0 *FindAllResponse, _a1 error) *MockRepositoryReader_FindAll_Call
        + RunAndReturn(run <font color=blue>func</font>(string, string) (*FindAllResponse, error)) *MockRepositoryReader_FindAll_Call

    }
    class MockRepository_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + FindAll(_a0 <font color=blue>interface</font>{}, _a1 <font color=blue>interface</font>{}) *MockRepository_FindAll_Call

    }
    class MockRepository_FindAll_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string, string) ) *MockRepository_FindAll_Call
        + Return(_a0 *FindAllResponse, _a1 error) *MockRepository_FindAll_Call
        + RunAndReturn(run <font color=blue>func</font>(string, string) (*FindAllResponse, error)) *MockRepository_FindAll_Call

    }
    interface Repository  {
    }
    interface RepositoryReader  {
        + FindAll( string,  string) (*FindAllResponse, error)

    }
    interface mockConstructorTestingTNewMockRepository  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockRepositoryReader  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    class msisdn.Entity << (T, #FF7700) >>  {
    }
    class msisdn.Msisdn << (T, #FF7700) >>  {
    }
    class msisdnRepository << (S,Aquamarine) >> {
        - db database.DynamoDB

        + FindAll(key string, target string) (*FindAllResponse, error)

    }
}
"mock.Mock" *-- "msisdn.MockRepository"
"mock.Mock" *-- "msisdn.MockRepositoryReader"
"mock.Call" *-- "msisdn.MockRepositoryReader_FindAll_Call"
"mock.Call" *-- "msisdn.MockRepository_FindAll_Call"
"msisdn.RepositoryReader" *-- "msisdn.Repository"

"msisdn.RepositoryReader" <|-- "msisdn.MockRepository"
"msisdn.RepositoryReader" <|-- "msisdn.MockRepositoryReader"
"msisdn.RepositoryReader" <|-- "msisdn.msisdnRepository"

namespace opsgenie {
    class Alert << (S,Aquamarine) >> {
        + AlertId string
        + Message string
        + Description string
        + Alias string
        + TinyId string
        + Username string
        + Responders []Responder
        + Teams []string
        + Priority string
        + Details Details
        + CreatedAt int64
        + UpdatedAt int64
        + Tags []string

    }
    class Details << (S,Aquamarine) >> {
        + ImpactedServices string
        + IncidentAlertType string
        + IncidentId string

    }
    class NotificationDTO << (S,Aquamarine) >> {
        + Action string
        + Alert Alert
        + Source Source
        + IntegrationName string
        + IntegrationId string
        + IntegrationType string

        + IsFromIncident() bool
        + Responders() string
        + AlertID() string
        + AlertTitle() string
        + CreatedAt() int64
        + ConvertToPublishManagerAlertDTO() publishmanager.AlertDTO

    }
    class Responder << (S,Aquamarine) >> {
        + Id string
        + Type string
        + Name string

    }
    class Source << (S,Aquamarine) >> {
        + Name string
        + Type string

    }
}


namespace publisher {
    class DomainError << (S,Aquamarine) >> {
        + StatusCode int
        + Err error
        + Retryable bool
        + Message string

        + Error() string

    }
    class MessageDTO << (S,Aquamarine) >> {
        + AlertID string
        + Title string
        + Responders string
        + Link string
        + Receiver string
        + Template string
        + StartedAt string

    }
    class MockPublisher << (S,Aquamarine) >> {
        + EXPECT() *MockPublisher_Expecter
        + SendMessage(_a0 appcontext.Context, _a1 MessageDTO) (*SendMessageDTO, error)

    }
    class MockPublisher_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + SendMessage(_a0 <font color=blue>interface</font>{}, _a1 <font color=blue>interface</font>{}) *MockPublisher_SendMessage_Call

    }
    class MockPublisher_SendMessage_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(appcontext.Context, MessageDTO) ) *MockPublisher_SendMessage_Call
        + Return(_a0 *SendMessageDTO, _a1 error) *MockPublisher_SendMessage_Call
        + RunAndReturn(run <font color=blue>func</font>(appcontext.Context, MessageDTO) (*SendMessageDTO, error)) *MockPublisher_SendMessage_Call

    }
    class MockSender << (S,Aquamarine) >> {
        + EXPECT() *MockSender_Expecter
        + SendMessage(_a0 appcontext.Context, _a1 MessageDTO) (*SendMessageDTO, error)

    }
    class MockSender_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + SendMessage(_a0 <font color=blue>interface</font>{}, _a1 <font color=blue>interface</font>{}) *MockSender_SendMessage_Call

    }
    class MockSender_SendMessage_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(appcontext.Context, MessageDTO) ) *MockSender_SendMessage_Call
        + Return(_a0 *SendMessageDTO, _a1 error) *MockSender_SendMessage_Call
        + RunAndReturn(run <font color=blue>func</font>(appcontext.Context, MessageDTO) (*SendMessageDTO, error)) *MockSender_SendMessage_Call

    }
    class MockUseCases << (S,Aquamarine) >> {
        + EXPECT() *MockUseCases_Expecter
        + SendMessage(_a0 appcontext.Context, _a1 MessageDTO) (*SendMessageDTO, error)

    }
    class MockUseCases_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + SendMessage(_a0 <font color=blue>interface</font>{}, _a1 <font color=blue>interface</font>{}) *MockUseCases_SendMessage_Call

    }
    class MockUseCases_SendMessage_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(appcontext.Context, MessageDTO) ) *MockUseCases_SendMessage_Call
        + Return(_a0 *SendMessageDTO, _a1 error) *MockUseCases_SendMessage_Call
        + RunAndReturn(run <font color=blue>func</font>(appcontext.Context, MessageDTO) (*SendMessageDTO, error)) *MockUseCases_SendMessage_Call

    }
    interface Publisher  {
    }
    class SendMessageDTO << (S,Aquamarine) >> {
        + ID string
        + CreatedAt time.Time
        + Message *MessageDTO

    }
    interface Sender  {
        + SendMessage( appcontext.Context,  MessageDTO) (*SendMessageDTO, error)

    }
    interface UseCases  {
    }
    class domainError << (S,Aquamarine) >> {
        + StatusCode int
        + Description string
        + Retryable bool

    }
    interface mockConstructorTestingTNewMockPublisher  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockSender  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockUseCases  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    class publisher << (S,Aquamarine) >> {
        + Sender Sender

        + SendMessage(ctx appcontext.Context, messageToSend MessageDTO) (*SendMessageDTO, error)

    }
}
"mock.Mock" *-- "publisher.MockPublisher"
"mock.Call" *-- "publisher.MockPublisher_SendMessage_Call"
"mock.Mock" *-- "publisher.MockSender"
"mock.Call" *-- "publisher.MockSender_SendMessage_Call"
"mock.Mock" *-- "publisher.MockUseCases"
"mock.Call" *-- "publisher.MockUseCases_SendMessage_Call"
"publisher.Sender" *-- "publisher.Publisher"
"publisher.Publisher" *-- "publisher.UseCases"

"publisher.Sender" <|-- "publisher.MockPublisher"
"publisher.Sender" <|-- "publisher.MockSender"
"publisher.Sender" <|-- "publisher.MockUseCases"
"publisher.Sender" <|-- "publisher.publisher"

namespace publishmanager {
    class AlertDTO << (S,Aquamarine) >> {
        + ID string
        + Title string
        + CreatedAt int64
        + Link string
        + Receiver msisdn.Msisdn

    }
    interface CollectCounteror  {
        + CollectCounter(labels <font color=blue>map</font>[string]string) 

    }
    class Input << (S,Aquamarine) >> {
        + Sender publisher.Sender
        + Repository Repository
        + Queuer Queuer
        + TimeToWaitingMinutes int
        + Template string
        + Receiver string
        + MetricCollector MetricCollector

    }
    interface LatencyCollector  {
        + CollectLatencyStart() LatencyCollector
        + CollectLatencyWithError(code string) 
        + CollectLatencyWithSuccess() 

    }
    interface MetricCollector  {
    }
    class MockCollectCounteror << (S,Aquamarine) >> {
        + EXPECT() *MockCollectCounteror_Expecter
        + CollectCounter(labels <font color=blue>map</font>[string]string) 

    }
    class MockCollectCounteror_CollectCounter_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(<font color=blue>map</font>[string]string) ) *MockCollectCounteror_CollectCounter_Call
        + Return() *MockCollectCounteror_CollectCounter_Call
        + RunAndReturn(run <font color=blue>func</font>(<font color=blue>map</font>[string]string) ) *MockCollectCounteror_CollectCounter_Call

    }
    class MockCollectCounteror_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + CollectCounter(labels <font color=blue>interface</font>{}) *MockCollectCounteror_CollectCounter_Call

    }
    class MockLatencyCollector << (S,Aquamarine) >> {
        + EXPECT() *MockLatencyCollector_Expecter
        + CollectLatencyStart() LatencyCollector
        + CollectLatencyWithError(code string) 
        + CollectLatencyWithSuccess() 

    }
    class MockLatencyCollector_CollectLatencyStart_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockLatencyCollector_CollectLatencyStart_Call
        + Return(_a0 LatencyCollector) *MockLatencyCollector_CollectLatencyStart_Call
        + RunAndReturn(run <font color=blue>func</font>() LatencyCollector) *MockLatencyCollector_CollectLatencyStart_Call

    }
    class MockLatencyCollector_CollectLatencyWithError_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string) ) *MockLatencyCollector_CollectLatencyWithError_Call
        + Return() *MockLatencyCollector_CollectLatencyWithError_Call
        + RunAndReturn(run <font color=blue>func</font>(string) ) *MockLatencyCollector_CollectLatencyWithError_Call

    }
    class MockLatencyCollector_CollectLatencyWithSuccess_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockLatencyCollector_CollectLatencyWithSuccess_Call
        + Return() *MockLatencyCollector_CollectLatencyWithSuccess_Call
        + RunAndReturn(run <font color=blue>func</font>() ) *MockLatencyCollector_CollectLatencyWithSuccess_Call

    }
    class MockLatencyCollector_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + CollectLatencyStart() *MockLatencyCollector_CollectLatencyStart_Call
        + CollectLatencyWithError(code <font color=blue>interface</font>{}) *MockLatencyCollector_CollectLatencyWithError_Call
        + CollectLatencyWithSuccess() *MockLatencyCollector_CollectLatencyWithSuccess_Call

    }
    class MockMetricCollector << (S,Aquamarine) >> {
        + EXPECT() *MockMetricCollector_Expecter
        + CollectCounter(labels <font color=blue>map</font>[string]string) 
        + CollectLatencyStart() LatencyCollector
        + CollectLatencyWithError(code string) 
        + CollectLatencyWithSuccess() 

    }
    class MockMetricCollector_CollectCounter_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(<font color=blue>map</font>[string]string) ) *MockMetricCollector_CollectCounter_Call
        + Return() *MockMetricCollector_CollectCounter_Call
        + RunAndReturn(run <font color=blue>func</font>(<font color=blue>map</font>[string]string) ) *MockMetricCollector_CollectCounter_Call

    }
    class MockMetricCollector_CollectLatencyStart_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockMetricCollector_CollectLatencyStart_Call
        + Return(_a0 LatencyCollector) *MockMetricCollector_CollectLatencyStart_Call
        + RunAndReturn(run <font color=blue>func</font>() LatencyCollector) *MockMetricCollector_CollectLatencyStart_Call

    }
    class MockMetricCollector_CollectLatencyWithError_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(string) ) *MockMetricCollector_CollectLatencyWithError_Call
        + Return() *MockMetricCollector_CollectLatencyWithError_Call
        + RunAndReturn(run <font color=blue>func</font>(string) ) *MockMetricCollector_CollectLatencyWithError_Call

    }
    class MockMetricCollector_CollectLatencyWithSuccess_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockMetricCollector_CollectLatencyWithSuccess_Call
        + Return() *MockMetricCollector_CollectLatencyWithSuccess_Call
        + RunAndReturn(run <font color=blue>func</font>() ) *MockMetricCollector_CollectLatencyWithSuccess_Call

    }
    class MockMetricCollector_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + CollectCounter(labels <font color=blue>interface</font>{}) *MockMetricCollector_CollectCounter_Call
        + CollectLatencyStart() *MockMetricCollector_CollectLatencyStart_Call
        + CollectLatencyWithError(code <font color=blue>interface</font>{}) *MockMetricCollector_CollectLatencyWithError_Call
        + CollectLatencyWithSuccess() *MockMetricCollector_CollectLatencyWithSuccess_Call

    }
    class MockPublishManager << (S,Aquamarine) >> {
        + EXPECT() *MockPublishManager_Expecter
        + SendMessage(_a0 appcontext.Context, _a1 From, _a2 AlertDTO) (*PublishManagerModel, error)

    }
    class MockPublishManager_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + SendMessage(_a0 <font color=blue>interface</font>{}, _a1 <font color=blue>interface</font>{}, _a2 <font color=blue>interface</font>{}) *MockPublishManager_SendMessage_Call

    }
    class MockPublishManager_SendMessage_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(appcontext.Context, From, AlertDTO) ) *MockPublishManager_SendMessage_Call
        + Return(_a0 *PublishManagerModel, _a1 error) *MockPublishManager_SendMessage_Call
        + RunAndReturn(run <font color=blue>func</font>(appcontext.Context, From, AlertDTO) (*PublishManagerModel, error)) *MockPublishManager_SendMessage_Call

    }
    class MockPublisherEntityKey << (S,Aquamarine) >> {
        + EXPECT() *MockPublisherEntityKey_Expecter
        + String() string

    }
    class MockPublisherEntityKey_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + String() *MockPublisherEntityKey_String_Call

    }
    class MockPublisherEntityKey_String_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockPublisherEntityKey_String_Call
        + Return(_a0 string) *MockPublisherEntityKey_String_Call
        + RunAndReturn(run <font color=blue>func</font>() string) *MockPublisherEntityKey_String_Call

    }
    class MockQueueWriter << (S,Aquamarine) >> {
        + EXPECT() *MockQueueWriter_Expecter
        + Create(_a0 AlertDTO) error

    }
    class MockQueueWriter_Create_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(AlertDTO) ) *MockQueueWriter_Create_Call
        + Return(_a0 error) *MockQueueWriter_Create_Call
        + RunAndReturn(run <font color=blue>func</font>(AlertDTO) error) *MockQueueWriter_Create_Call

    }
    class MockQueueWriter_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + Create(_a0 <font color=blue>interface</font>{}) *MockQueueWriter_Create_Call

    }
    class MockQueuer << (S,Aquamarine) >> {
        + EXPECT() *MockQueuer_Expecter
        + Create(_a0 AlertDTO) error

    }
    class MockQueuer_Create_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(AlertDTO) ) *MockQueuer_Create_Call
        + Return(_a0 error) *MockQueuer_Create_Call
        + RunAndReturn(run <font color=blue>func</font>(AlertDTO) error) *MockQueuer_Create_Call

    }
    class MockQueuer_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + Create(_a0 <font color=blue>interface</font>{}) *MockQueuer_Create_Call

    }
    class MockRepository << (S,Aquamarine) >> {
        + EXPECT() *MockRepository_Expecter
        + Find(_a0 PublisherEntityKey) (*PublisherEntity, error)
        + Upsert(_a0 PublisherEntityKey, _a1 PublisherEntity) (*PublisherEntity, error)

    }
    class MockRepositoryReader << (S,Aquamarine) >> {
        + EXPECT() *MockRepositoryReader_Expecter
        + Find(_a0 PublisherEntityKey) (*PublisherEntity, error)

    }
    class MockRepositoryReader_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + Find(_a0 <font color=blue>interface</font>{}) *MockRepositoryReader_Find_Call

    }
    class MockRepositoryReader_Find_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(PublisherEntityKey) ) *MockRepositoryReader_Find_Call
        + Return(_a0 *PublisherEntity, _a1 error) *MockRepositoryReader_Find_Call
        + RunAndReturn(run <font color=blue>func</font>(PublisherEntityKey) (*PublisherEntity, error)) *MockRepositoryReader_Find_Call

    }
    class MockRepositoryWriter << (S,Aquamarine) >> {
        + EXPECT() *MockRepositoryWriter_Expecter
        + Upsert(_a0 PublisherEntityKey, _a1 PublisherEntity) (*PublisherEntity, error)

    }
    class MockRepositoryWriter_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + Upsert(_a0 <font color=blue>interface</font>{}, _a1 <font color=blue>interface</font>{}) *MockRepositoryWriter_Upsert_Call

    }
    class MockRepositoryWriter_Upsert_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(PublisherEntityKey, PublisherEntity) ) *MockRepositoryWriter_Upsert_Call
        + Return(_a0 *PublisherEntity, _a1 error) *MockRepositoryWriter_Upsert_Call
        + RunAndReturn(run <font color=blue>func</font>(PublisherEntityKey, PublisherEntity) (*PublisherEntity, error)) *MockRepositoryWriter_Upsert_Call

    }
    class MockRepository_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + Find(_a0 <font color=blue>interface</font>{}) *MockRepository_Find_Call
        + Upsert(_a0 <font color=blue>interface</font>{}, _a1 <font color=blue>interface</font>{}) *MockRepository_Upsert_Call

    }
    class MockRepository_Find_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(PublisherEntityKey) ) *MockRepository_Find_Call
        + Return(_a0 *PublisherEntity, _a1 error) *MockRepository_Find_Call
        + RunAndReturn(run <font color=blue>func</font>(PublisherEntityKey) (*PublisherEntity, error)) *MockRepository_Find_Call

    }
    class MockRepository_Upsert_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(PublisherEntityKey, PublisherEntity) ) *MockRepository_Upsert_Call
        + Return(_a0 *PublisherEntity, _a1 error) *MockRepository_Upsert_Call
        + RunAndReturn(run <font color=blue>func</font>(PublisherEntityKey, PublisherEntity) (*PublisherEntity, error)) *MockRepository_Upsert_Call

    }
    class MockUseCases << (S,Aquamarine) >> {
        + EXPECT() *MockUseCases_Expecter
        + SendMessage(_a0 appcontext.Context, _a1 From, _a2 AlertDTO) (*PublishManagerModel, error)

    }
    class MockUseCases_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + SendMessage(_a0 <font color=blue>interface</font>{}, _a1 <font color=blue>interface</font>{}, _a2 <font color=blue>interface</font>{}) *MockUseCases_SendMessage_Call

    }
    class MockUseCases_SendMessage_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(appcontext.Context, From, AlertDTO) ) *MockUseCases_SendMessage_Call
        + Return(_a0 *PublishManagerModel, _a1 error) *MockUseCases_SendMessage_Call
        + RunAndReturn(run <font color=blue>func</font>(appcontext.Context, From, AlertDTO) (*PublishManagerModel, error)) *MockUseCases_SendMessage_Call

    }
    interface PublishManager  {
        + SendMessage( appcontext.Context,  From,  AlertDTO) (*PublishManagerModel, error)

    }
    class PublishManagerModel << (S,Aquamarine) >> {
        + AlertID string
        + MessageID string

    }
    class PublisherEntity << (S,Aquamarine) >> {
        + Message string
        + AlertId string
        + Responders string
        + Status string
        + CreatedAt time.Time
        + AlertReceivedAt int64
        + UpdatedAt time.Time
        + TimeToWaitingMinutes int
        + Receiver string
        + Template string
        + MessageId string
        + MessageCreatedAt time.Time
        + ExpirationTime *int64
        + Link string

        + IsExpired() bool
        + IsSent() bool
        + ToMessage() publisher.MessageDTO

    }
    interface PublisherEntityKey  {
        + String() string

    }
    class PublisherEntityStatusEnum << (S,Aquamarine) >> {
        + String() string

    }
    interface QueueWriter  {
        + Create( AlertDTO) error

    }
    interface Queuer  {
    }
    interface Repository  {
    }
    interface RepositoryReader  {
        + Find( PublisherEntityKey) (*PublisherEntity, error)

    }
    interface RepositoryWriter  {
        + Upsert( PublisherEntityKey,  PublisherEntity) (*PublisherEntity, error)

    }
    interface UseCases  {
    }
    interface mockConstructorTestingTNewMockCollectCounteror  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockLatencyCollector  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockMetricCollector  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockPublishManager  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockPublisherEntityKey  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockQueueWriter  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockQueuer  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockRepository  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockRepositoryReader  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockRepositoryWriter  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    interface mockConstructorTestingTNewMockUseCases  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    class publishManager << (S,Aquamarine) >> {
        - publisher publisher.UseCases
        - repository Repository
        - queuer Queuer
        - timeToWaitingMinutes int
        - template string
        - receiver string
        - receiverAnonymized string
        - metricCollector MetricCollector

        - sendMessage(ctx appcontext.Context, from From, alert AlertDTO) (*PublishManagerModel, error)
        - resolveEntity(ctx appcontext.Context, alert AlertDTO, entityKey PublisherEntityKey) (*PublisherEntity, bool, error)
        - createEntity(ctx appcontext.Context, alert AlertDTO, receiver string) *PublisherEntity
        - sendToQueueFactory(ctx appcontext.Context, from From, alert AlertDTO) <font color=blue>func</font>() error

        + SendMessage(ctx appcontext.Context, from From, alert AlertDTO) (*PublishManagerModel, error)

    }
    class publisherEntityKey << (S,Aquamarine) >> {
        - key string

        + String() string

    }
    class publisherEntityRepository << (S,Aquamarine) >> {
        - db database.DynamoDB

        + Find(key PublisherEntityKey) (*PublisherEntity, error)
        + Upsert(key PublisherEntityKey, publisherEntity PublisherEntity) (*PublisherEntity, error)

    }
    class publishmanager.From << (T, #FF7700) >>  {
    }
    class publishmanager.PublisherEntityStatusEnum << (T, #FF7700) >>  {
    }
}
"publishmanager.CollectCounteror" *-- "publishmanager.MetricCollector"
"publishmanager.LatencyCollector" *-- "publishmanager.MetricCollector"
"mock.Mock" *-- "publishmanager.MockCollectCounteror"
"mock.Call" *-- "publishmanager.MockCollectCounteror_CollectCounter_Call"
"mock.Mock" *-- "publishmanager.MockLatencyCollector"
"mock.Call" *-- "publishmanager.MockLatencyCollector_CollectLatencyStart_Call"
"mock.Call" *-- "publishmanager.MockLatencyCollector_CollectLatencyWithError_Call"
"mock.Call" *-- "publishmanager.MockLatencyCollector_CollectLatencyWithSuccess_Call"
"mock.Mock" *-- "publishmanager.MockMetricCollector"
"mock.Call" *-- "publishmanager.MockMetricCollector_CollectCounter_Call"
"mock.Call" *-- "publishmanager.MockMetricCollector_CollectLatencyStart_Call"
"mock.Call" *-- "publishmanager.MockMetricCollector_CollectLatencyWithError_Call"
"mock.Call" *-- "publishmanager.MockMetricCollector_CollectLatencyWithSuccess_Call"
"mock.Mock" *-- "publishmanager.MockPublishManager"
"mock.Call" *-- "publishmanager.MockPublishManager_SendMessage_Call"
"mock.Mock" *-- "publishmanager.MockPublisherEntityKey"
"mock.Call" *-- "publishmanager.MockPublisherEntityKey_String_Call"
"mock.Mock" *-- "publishmanager.MockQueueWriter"
"mock.Call" *-- "publishmanager.MockQueueWriter_Create_Call"
"mock.Mock" *-- "publishmanager.MockQueuer"
"mock.Call" *-- "publishmanager.MockQueuer_Create_Call"
"mock.Mock" *-- "publishmanager.MockRepository"
"mock.Mock" *-- "publishmanager.MockRepositoryReader"
"mock.Call" *-- "publishmanager.MockRepositoryReader_Find_Call"
"mock.Mock" *-- "publishmanager.MockRepositoryWriter"
"mock.Call" *-- "publishmanager.MockRepositoryWriter_Upsert_Call"
"mock.Call" *-- "publishmanager.MockRepository_Find_Call"
"mock.Call" *-- "publishmanager.MockRepository_Upsert_Call"
"mock.Mock" *-- "publishmanager.MockUseCases"
"mock.Call" *-- "publishmanager.MockUseCases_SendMessage_Call"
"publishmanager.QueueWriter" *-- "publishmanager.Queuer"
"publishmanager.RepositoryReader" *-- "publishmanager.Repository"
"publishmanager.RepositoryWriter" *-- "publishmanager.Repository"
"publishmanager.PublishManager" *-- "publishmanager.UseCases"

"grafanaoncall.CollectCounteror" <|-- "publishmanager.MockCollectCounteror"
"publishmanager.CollectCounteror" <|-- "publishmanager.MockCollectCounteror"
"publishmanager.LatencyCollector" <|-- "publishmanager.MockLatencyCollector"
"grafanaoncall.CollectCounteror" <|-- "publishmanager.MockMetricCollector"
"publishmanager.CollectCounteror" <|-- "publishmanager.MockMetricCollector"
"publishmanager.LatencyCollector" <|-- "publishmanager.MockMetricCollector"
"publishmanager.PublishManager" <|-- "publishmanager.MockPublishManager"
"publishmanager.PublisherEntityKey" <|-- "publishmanager.MockPublisherEntityKey"
"publishmanager.QueueWriter" <|-- "publishmanager.MockQueueWriter"
"publishmanager.QueueWriter" <|-- "publishmanager.MockQueuer"
"publishmanager.RepositoryReader" <|-- "publishmanager.MockRepository"
"publishmanager.RepositoryWriter" <|-- "publishmanager.MockRepository"
"publishmanager.RepositoryReader" <|-- "publishmanager.MockRepositoryReader"
"publishmanager.RepositoryWriter" <|-- "publishmanager.MockRepositoryWriter"
"publishmanager.PublishManager" <|-- "publishmanager.MockUseCases"
"publishmanager.PublisherEntityKey" <|-- "publishmanager.PublisherEntityStatusEnum"
"publishmanager.PublishManager" <|-- "publishmanager.publishManager"
"publishmanager.PublisherEntityKey" <|-- "publishmanager.publisherEntityKey"
"publishmanager.RepositoryReader" <|-- "publishmanager.publisherEntityRepository"
"publishmanager.RepositoryWriter" <|-- "publishmanager.publisherEntityRepository"

namespace receiver {
    class MockReceiver << (S,Aquamarine) >> {
        + EXPECT() *MockReceiver_Expecter
        + Anonymized() string

    }
    class MockReceiver_Anonymized_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockReceiver_Anonymized_Call
        + Return(_a0 string) *MockReceiver_Anonymized_Call
        + RunAndReturn(run <font color=blue>func</font>() string) *MockReceiver_Anonymized_Call

    }
    class MockReceiver_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + Anonymized() *MockReceiver_Anonymized_Call

    }
    interface Receiver  {
        + Anonymized() string

    }
    interface mockConstructorTestingTNewMockReceiver  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    class receiver << (S,Aquamarine) >> {
        - number string

        + Anonymized() string

    }
}
"mock.Mock" *-- "receiver.MockReceiver"
"mock.Call" *-- "receiver.MockReceiver_Anonymized_Call"

"receiver.Receiver" <|-- "receiver.MockReceiver"
"receiver.Receiver" <|-- "receiver.receiver"

namespace sqs {
    interface Consumer  {
        + Consume() ([]*QueueMessage, error)
        + ConsumeWithContext(ctx context.Context) ([]*QueueMessage, error)
        + PollingIntervalSeconds() int64

    }
    class Input << (S,Aquamarine) >> {
        + AwsRegion string
        + AwsProfile string
        + AwsEndpoint string
        + MaxNumberOfMessages int64
        + WaitTimeSeconds int64
        + MessageAttributeNames []string
        + Timeout time.Duration
        + URL string
        + PollingIntervalSeconds int64

    }
    class MockConsumer << (S,Aquamarine) >> {
        + EXPECT() *MockConsumer_Expecter
        + Consume() ([]*QueueMessage, error)
        + ConsumeWithContext(ctx context.Context) ([]*QueueMessage, error)
        + PollingIntervalSeconds() int64

    }
    class MockConsumer_ConsumeWithContext_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(context.Context) ) *MockConsumer_ConsumeWithContext_Call
        + Return(_a0 []*QueueMessage, _a1 error) *MockConsumer_ConsumeWithContext_Call
        + RunAndReturn(run <font color=blue>func</font>(context.Context) ([]*QueueMessage, error)) *MockConsumer_ConsumeWithContext_Call

    }
    class MockConsumer_Consume_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockConsumer_Consume_Call
        + Return(_a0 []*QueueMessage, _a1 error) *MockConsumer_Consume_Call
        + RunAndReturn(run <font color=blue>func</font>() ([]*QueueMessage, error)) *MockConsumer_Consume_Call

    }
    class MockConsumer_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + Consume() *MockConsumer_Consume_Call
        + ConsumeWithContext(ctx <font color=blue>interface</font>{}) *MockConsumer_ConsumeWithContext_Call
        + PollingIntervalSeconds() *MockConsumer_PollingIntervalSeconds_Call

    }
    class MockConsumer_PollingIntervalSeconds_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockConsumer_PollingIntervalSeconds_Call
        + Return(_a0 int64) *MockConsumer_PollingIntervalSeconds_Call
        + RunAndReturn(run <font color=blue>func</font>() int64) *MockConsumer_PollingIntervalSeconds_Call

    }
    class QueueMessage << (S,Aquamarine) >> {
        - receiptHandle string
        - queue *queue

        + Body string
        + Data <font color=blue>interface</font>{}

        + DeleteMessage() (string, error)
        + DeleteMessageWithContext(ctx context.Context) (string, error)

    }
    interface mockConstructorTestingTNewMockConsumer  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
    class queue << (S,Aquamarine) >> {
        - client *sqs.SQS
        - input Input
        - url string

        - sendMessageWithRetry(messageBody string, maxAttempts int, attempt int) (*sqs.SendMessageOutput, error)

        + Consume() ([]*QueueMessage, error)
        + ConsumeWithContext(ctx context.Context) ([]*QueueMessage, error)
        + PollingIntervalSeconds() int64
        + Create(msg publishmanager.AlertDTO) error

    }
}
"mock.Mock" *-- "sqs.MockConsumer"
"mock.Call" *-- "sqs.MockConsumer_ConsumeWithContext_Call"
"mock.Call" *-- "sqs.MockConsumer_Consume_Call"
"mock.Call" *-- "sqs.MockConsumer_PollingIntervalSeconds_Call"

"sqs.Consumer" <|-- "sqs.MockConsumer"
"publishmanager.QueueWriter" <|-- "sqs.queue"
"sqs.Consumer" <|-- "sqs.queue"

namespace worker {
    interface Consumer  {
        + URL() string
        + Handler( appcontext.Context,  Input,  opsgenie.NotificationDTO) error
        + PollingIntervalSeconds() int64

    }
    class Input << (S,Aquamarine) >> {
        + Logger logwrapper.LoggerWrapper
        + PublishManager publishmanager.UseCases
        + Consume <font color=blue>func</font>(sqs.Input) <font color=blue>chan</font> emitter.Event

    }
    class MockConsumer << (S,Aquamarine) >> {
        + EXPECT() *MockConsumer_Expecter
        + Handler(_a0 appcontext.Context, _a1 Input, _a2 opsgenie.NotificationDTO) error
        + PollingIntervalSeconds() int64
        + URL() string

    }
    class MockConsumer_Expecter << (S,Aquamarine) >> {
        - mock *mock.Mock

        + Handler(_a0 <font color=blue>interface</font>{}, _a1 <font color=blue>interface</font>{}, _a2 <font color=blue>interface</font>{}) *MockConsumer_Handler_Call
        + PollingIntervalSeconds() *MockConsumer_PollingIntervalSeconds_Call
        + URL() *MockConsumer_URL_Call

    }
    class MockConsumer_Handler_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>(appcontext.Context, Input, opsgenie.NotificationDTO) ) *MockConsumer_Handler_Call
        + Return(_a0 error) *MockConsumer_Handler_Call
        + RunAndReturn(run <font color=blue>func</font>(appcontext.Context, Input, opsgenie.NotificationDTO) error) *MockConsumer_Handler_Call

    }
    class MockConsumer_PollingIntervalSeconds_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockConsumer_PollingIntervalSeconds_Call
        + Return(_a0 int64) *MockConsumer_PollingIntervalSeconds_Call
        + RunAndReturn(run <font color=blue>func</font>() int64) *MockConsumer_PollingIntervalSeconds_Call

    }
    class MockConsumer_URL_Call << (S,Aquamarine) >> {
        + Run(run <font color=blue>func</font>() ) *MockConsumer_URL_Call
        + Return(_a0 string) *MockConsumer_URL_Call
        + RunAndReturn(run <font color=blue>func</font>() string) *MockConsumer_URL_Call

    }
    class consumerWhoCreates << (S,Aquamarine) >> {
        + URL() string
        + Handler(ctx appcontext.Context, input Input, notificaiton opsgenie.NotificationDTO) error
        + PollingIntervalSeconds() int64

    }
    interface mockConstructorTestingTNewMockConsumer  {
        + Cleanup( <font color=blue>func</font>() ) 

    }
}
"mock.Mock" *-- "worker.MockConsumer"
"mock.Call" *-- "worker.MockConsumer_Handler_Call"
"mock.Call" *-- "worker.MockConsumer_PollingIntervalSeconds_Call"
"mock.Call" *-- "worker.MockConsumer_URL_Call"

"worker.Consumer" <|-- "worker.MockConsumer"
"worker.Consumer" <|-- "worker.consumerWhoCreates"

"__builtin__.int" #.. "grafanaoncall.From"
"__builtin__.int" #.. "publishmanager.From"
"__builtin__.int" #.. "publishmanager.PublisherEntityStatusEnum"
"__builtin__.string" #.. "appcontext.ContextKey"
"__builtin__.string" #.. "msisdn.Msisdn"
"msisdn.<font color=blue>map</font>[string]<font color=blue>interface</font>{}" #.. "msisdn.Entity"
@enduml
